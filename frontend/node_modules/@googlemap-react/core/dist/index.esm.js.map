{"version":3,"file":"index.esm.js","sources":["../src/common/constants.ts","../src/hooks/useGoogleAPI.ts","../src/hooks/useGoogleListener.ts","../src/hooks/useMemoizedOptions.ts","../src/contexts/GoogleMapContext.tsx","../src/components/BasicAutocomplete.tsx","../src/components/Autocomplete.tsx","../src/components/StandaloneAutocomplete.tsx","../src/components/Layer.tsx","../src/components/BicyclingLayer.tsx","../src/components/Circle.tsx","../src/components/CustomControl.tsx","../src/components/DrawingManager.tsx","../src/components/GroundOverlay.tsx","../src/hocs/SecurityBounder.tsx","../src/components/HeatMap.tsx","../src/components/InfoWindow.tsx","../src/components/KmlLayer.tsx","../src/components/MapBox.tsx","../src/components/Marker.tsx","../src/components/OverlayView.tsx","../src/components/Polygon.tsx","../src/components/Polyline.tsx","../src/components/Rectangle.tsx","../src/components/BasicSearchBox.tsx","../src/components/SearchBox.tsx","../src/components/StandaloneSearchBox.tsx","../src/components/BasicStreetView.tsx","../src/components/StandaloneStreetView.tsx","../src/components/StreetView.tsx","../src/components/TrafficLayer.tsx","../src/components/TransitLayer.tsx"],"sourcesContent":["import {\n  GoogleMapLibrary,\n  GroundOverlayOptions,\n  HeatmapLayerOptions,\n} from './types'\n\nexport const NYC_LATLNG: google.maps.LatLngLiteral = {\n  lat: 40.7128,\n  lng: -74.006,\n}\nexport const NYC_POLYGON: google.maps.LatLngLiteral[] = [\n  {lat: 40.718, lng: -74.006},\n  {lat: 40.718, lng: -74.01},\n  {lat: 40.7138, lng: -74.001},\n  {lat: 40.7128, lng: -74.005},\n]\nexport const NYC_RECTANGLE: google.maps.LatLngBoundsLiteral = {\n  east: -74,\n  west: -74.006,\n  north: 40.718,\n  south: 40.714,\n}\n\nconst DEFAULT_MAP_ZOOM = 14\n\nexport const DEFAULT_CIRCLE_OPTIONS: google.maps.CircleOptions = {\n  center: NYC_LATLNG,\n  radius: 200,\n}\n\nexport const DEFAULT_DRAWING_MANAGER_OPTIONS: google.maps.drawing.DrawingManagerOptions = {}\n\nexport const DEFAULT_GROUND_OVERLAY_OPTIONS: GroundOverlayOptions = {\n  url: 'https://placehold.it/256x256',\n  bounds: NYC_RECTANGLE,\n}\n\nexport const DEFAULT_HEAT_MAP_OPTIONS: HeatmapLayerOptions = {\n  data: [{lat: 40.718, lng: -74.006}, {lat: 40.712, lng: -74.01}],\n  radius: 100,\n}\n\nexport const DEFAULT_INFO_WINDOW_OPTIONS: google.maps.InfoWindowOptions = {\n  content: 'Hello',\n  position: NYC_LATLNG,\n}\n\nexport const DEFAULT_KML_LAYER_OPTIONS: google.maps.KmlLayerOptions = {\n  url:\n    'http://api.flickr.com/services/feeds/geo/?g=322338@N20&lang=en-us&format=feed-georss',\n}\n\nexport const DEFAULT_MAP_OPTIONS: google.maps.MapOptions = {\n  center: NYC_LATLNG,\n  zoom: DEFAULT_MAP_ZOOM,\n}\n\nexport const DEFAULT_MAP_STYLE = {\n  height: '100%',\n  width: '100%',\n}\n\nexport const DEFAULT_MARKER_OPTIONS: google.maps.MarkerOptions = {\n  position: NYC_LATLNG,\n}\n\nexport const DEFAULT_POLYGON_OPTIONS: google.maps.PolygonOptions = {\n  paths: NYC_POLYGON,\n}\n\nexport const DEFAULT_POLYLINE_OPTIONS: google.maps.PolylineOptions = {\n  path: NYC_POLYGON,\n}\n\nexport const DEFAULT_RECTANGLE_OPTIONS: google.maps.RectangleOptions = {\n  bounds: NYC_RECTANGLE,\n}\n\nexport const DEFAULT_SEARCH_BOX_OPTIONS: google.maps.places.SearchBoxOptions = {\n  bounds: NYC_RECTANGLE,\n}\n\nexport const DEFAULT_AUTOCOMPLETE_OPTIONS: google.maps.places.AutocompleteOptions = {\n  bounds: NYC_RECTANGLE,\n}\n\nexport const DEFAULT_STREET_VIEW_OPTIONS: google.maps.StreetViewPanoramaOptions = {\n  position: NYC_LATLNG,\n}\n\nexport const GOOGLE_MAP_BASE_URI = 'https://maps.googleapis.com/maps/api/js'\n\nexport const GOOGLE_MAP_LIBRARY_NAMES: GoogleMapLibrary[] = [\n  'drawing',\n  'geometry',\n  'places',\n  'visualization',\n]\n","import {useState, useEffect} from 'react'\nimport loadjs from 'loadjs'\nimport {GOOGLE_MAP_BASE_URI} from '../common/constants'\n\ninterface GoogleAPIProps {\n  apiKey: string\n  libraryParam: string\n  languageParam: string\n  regionParam: string\n}\n\nconst useGoogleAPI = ({\n  apiKey,\n  libraryParam,\n  languageParam,\n  regionParam,\n}: GoogleAPIProps) => {\n  const [loaded, setLoaded] = useState(false)\n  useEffect(() => {\n    // Should not load script at server side\n    if (typeof document === 'undefined') return\n\n    const googleMapScriptUri = `${GOOGLE_MAP_BASE_URI}?key=${apiKey}${libraryParam}${languageParam}${regionParam}`\n    if (!loadjs.isDefined('gmap')) loadjs(googleMapScriptUri, 'gmap')\n    loadjs.ready('gmap', {\n      success: () => {\n        setLoaded(true)\n      },\n      error: () => {\n        loadjs.reset()\n        console.error('Unable to fetch Google Map sdk')\n      },\n    })\n  }, [])\n  return loaded\n}\n\nexport default useGoogleAPI\n","import {useEffect} from 'react'\n\ninterface GoogleMapEvent {\n  name: string\n  handler?: (...args: any[]) => void\n}\n\nconst useGoogleListener = (\n  instance: google.maps.MVCObject | undefined,\n  events: GoogleMapEvent[],\n) => {\n  useEffect(() => {\n    if (instance === undefined) return\n    const listeners: google.maps.MapsEventListener[] = []\n    events.forEach(event => {\n      if (event.handler)\n        listeners.push(\n          google.maps.event.addListener(instance, event.name, event.handler),\n        )\n    })\n    return () => {\n      listeners.forEach(listener => listener.remove())\n    }\n  }, [instance, events])\n}\n\nexport default useGoogleListener\n","import {useEffect} from 'react'\nimport {GoogleMapObjectWithSetOptions} from '../common/types'\n\nconst useMemoizedOptions = (\n  instance: GoogleMapObjectWithSetOptions | undefined,\n  opts: any,\n  prevOpts: string,\n  setPrevOpts: React.Dispatch<React.SetStateAction<string>>,\n) => {\n  useEffect(() => {\n    if (\n      instance === undefined ||\n      opts === undefined ||\n      JSON.stringify(opts) === prevOpts\n    )\n      return\n    instance.setOptions(opts)\n    setPrevOpts(JSON.stringify(opts))\n  }, [instance, opts])\n}\n\nexport default useMemoizedOptions\n","import React, {useReducer} from 'react'\nimport {\n  GoogleMapAction,\n  GoogleMapObject,\n  GoogleMapObjectWithSetMap,\n  GoogleMapProviderProps,\n  GoogleMapReducer,\n  GoogleMapState,\n} from '../common/types'\n\nconst initialState = (): GoogleMapState => ({\n  map: undefined,\n  objects: new Map<string, GoogleMapObject>(),\n  places: undefined,\n})\n\nconst GoogleMapContext = React.createContext<GoogleMapReducer>({\n  state: (undefined as unknown) as GoogleMapState,\n  dispatch: (undefined as unknown) as React.Dispatch<GoogleMapAction>,\n})\n\nconst reducer = (state: GoogleMapState, action: GoogleMapAction) => {\n  switch (action.type) {\n    case 'reset':\n      return initialState()\n\n    case 'init_map':\n      if (action.map === undefined)\n        throw new Error('You should specify a map instance')\n      if (state.map !== undefined)\n        throw new Error('There can only be one map instance in a context')\n\n      return {...state, map: action.map, places: action.places}\n\n    case 'add_object':\n      if (action.object === undefined)\n        throw new Error('You should specify an object instance')\n      if (action.id === undefined) throw new Error('You should specify an id')\n      if (state.objects.has(action.id))\n        throw new Error('The id has already been taken')\n      state.objects.set(action.id, action.object)\n\n      return state\n\n    case 'remove_object':\n      if (action.id === undefined) throw new Error('You should specify an id')\n      const objectToRemove = state.objects.get(action.id)\n      if (objectToRemove === undefined)\n        throw new Error('There is no object with the given id')\n\n      // If the object can setMap, then setMap to null\n      if ((objectToRemove as GoogleMapObjectWithSetMap).setMap)\n        (objectToRemove as GoogleMapObjectWithSetMap).setMap(null)\n      state.objects.delete(action.id)\n\n      return state\n\n    default:\n      return state\n  }\n}\n\nconst GoogleMapProvider = ({children}: GoogleMapProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState())\n  const value = {state, dispatch}\n\n  return (\n    <>\n      <GoogleMapContext.Provider value={value}>\n        {children}\n      </GoogleMapContext.Provider>\n    </>\n  )\n}\n\nconst GoogleMapConsumer = GoogleMapContext.Consumer\n\nexport {GoogleMapContext, GoogleMapProvider, GoogleMapConsumer}\n","import React, {useContext, useEffect, useState} from 'react'\nimport ReactDOMServer from 'react-dom/server'\nimport uuid from 'uuid/v1'\nimport {useGoogleListener, useMemoizedOptions} from '../hooks'\nimport {DEFAULT_AUTOCOMPLETE_OPTIONS} from '../common/constants'\nimport {BasicAutocompleteProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\n\nconst BasicAutocomplete = ({\n  id,\n  opts = DEFAULT_AUTOCOMPLETE_OPTIONS,\n  onPlaceChanged,\n  bindingPosition,\n  ...restProps\n}: BasicAutocompleteProps) => {\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [prevOpts, setPrevOpts] = useState('')\n  const [autocomplete, setAutocomplete] = useState<\n    google.maps.places.Autocomplete | undefined\n  >(undefined)\n  const [autocompleteId] = useState(id ? id : `autocomplete-${uuid()}`)\n  const [container] = useState(\n    document\n      .createRange()\n      .createContextualFragment(\n        ReactDOMServer.renderToString(\n          <input id={autocompleteId} {...restProps} />,\n        ),\n      ).firstElementChild,\n  )\n  const [lastBindingPosition, setLastBindingPosition] = useState(\n    bindingPosition,\n  )\n\n  const addAutocomplete = (autocomplete: google.maps.places.Autocomplete) =>\n    dispatch({type: 'add_object', object: autocomplete, id: autocompleteId})\n  const removeAutocomplete = () =>\n    dispatch({type: 'remove_object', id: autocompleteId})\n\n  // Create google.maps.places.Autocomplete\n  useEffect(() => {\n    if (state.map === undefined || state.places === undefined) return\n    const inputNode = (bindingPosition\n      ? container\n      : document.getElementById(autocompleteId)) as HTMLInputElement\n    const autocomplete = new google.maps.places.Autocomplete(inputNode, opts)\n    setAutocomplete(autocomplete)\n    addAutocomplete(autocomplete)\n    setPrevOpts(JSON.stringify(opts))\n    if (bindingPosition) {\n      if (bindingPosition !== lastBindingPosition) {\n        const last =\n          state.map.controls[google.maps.ControlPosition[lastBindingPosition!]]\n        const lastArray = last.getArray()\n        last.removeAt(lastArray.findIndex(element => element === container))\n        setLastBindingPosition(bindingPosition)\n      }\n      state.map.controls[google.maps.ControlPosition[bindingPosition]].push(\n        inputNode,\n      )\n    }\n    return () => removeAutocomplete()\n  }, [state.places, bindingPosition])\n\n  // Register google map event listeners\n  useGoogleListener(autocomplete, [\n    {name: 'place_changed', handler: onPlaceChanged},\n  ])\n\n  // Modify the google.maps.Autocomplete object when component props change\n  useMemoizedOptions(autocomplete, opts, prevOpts, setPrevOpts)\n\n  return bindingPosition ? null : <input id={autocompleteId} {...restProps} />\n}\n\nBasicAutocomplete.displayName = 'Autocomplete'\n\nexport default BasicAutocomplete\n","import React from 'react'\nimport {AutocompleteProps} from '../common/types'\nimport BasicAutocomplete from './BasicAutocomplete'\n\nconst Autocomplete = (props: AutocompleteProps) => (\n  <BasicAutocomplete {...props} />\n)\n\nAutocomplete.displayName = 'Autocomplete'\n\nexport default Autocomplete\n","import React from 'react'\nimport BasicAutocomplete from './BasicAutocomplete'\nimport {StandaloneAutocompleteProps} from '../common/types'\n\nconst StandaloneAutocomplete = (props: StandaloneAutocompleteProps) => (\n  <BasicAutocomplete {...props} />\n)\n\nStandaloneAutocomplete.displayName = 'StandaloneAutocomplete'\n\nexport default StandaloneAutocomplete\n","import React, {useContext, useEffect, useState} from 'react'\nimport {GoogleMapLayer, LayerProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\n\nconst Layer = ({type, opts}: LayerProps) => {\n  const layerId = `${type}-layer`\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [layer, setLayer] = useState<GoogleMapLayer | undefined>(undefined)\n\n  const addLayer = (layer: GoogleMapLayer) =>\n    dispatch({\n      type: 'add_object',\n      object: layer,\n      id: layerId,\n    })\n  const removeLayer = () => dispatch({type: 'remove_object', id: layerId})\n\n  useEffect(() => {\n    if (state.map === undefined) return\n    const layerNameToClass = {\n      bicycling: google.maps.BicyclingLayer,\n      traffic: google.maps.TrafficLayer,\n      transit: google.maps.TransitLayer,\n    }\n    const layer =\n      type === 'traffic'\n        ? new layerNameToClass[type](opts)\n        : new layerNameToClass[type]()\n    layer.setMap(state.map)\n    setLayer(layer)\n\n    // Add the layer to state.objects\n    addLayer(layer)\n\n    // Remove the layer when the component is unmounted\n    return () => removeLayer()\n  }, [state.map])\n\n  useEffect(() => {\n    if (type !== 'traffic' || opts === undefined || layer === undefined) return\n    ;(layer as google.maps.TrafficLayer).setOptions(opts)\n  }, [opts])\n\n  return null\n}\n\nLayer.displayName = 'layer'\n\nexport default Layer\n","import React from 'react'\nimport Layer from './Layer'\n\nconst BicyclingLayer = ({}) => <Layer type=\"bicycling\" />\n\nBicyclingLayer.displayName = 'BicyclingLayer'\n\nexport default BicyclingLayer\n","import React, {useContext, useEffect, useState} from 'react'\nimport uuid from 'uuid/v1'\nimport {DEFAULT_CIRCLE_OPTIONS} from '../common/constants'\nimport {CircleProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\nimport {useGoogleListener, useMemoizedOptions} from '../hooks'\n\nconst Circle = ({\n  id,\n  opts = DEFAULT_CIRCLE_OPTIONS,\n  onCenterChanged,\n  onClick,\n  onDoubleClick,\n  onDrag,\n  onDragEnd,\n  onDragStart,\n  onMouseDown,\n  onMouseOut,\n  onMouseOver,\n  onMouseUp,\n  onRadiusChanged,\n  onRightClick,\n}: CircleProps) => {\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [prevOpts, setPrevOpts] = useState('')\n  const [circle, setCircle] = useState<google.maps.Circle | undefined>(\n    undefined,\n  )\n  const [circleId] = useState(id ? id : `circle-${uuid()}`)\n  const addCircle = (circle: google.maps.Circle) =>\n    dispatch({type: 'add_object', object: circle, id: circleId})\n  const removeCircle = () => dispatch({type: 'remove_object', id: circleId})\n\n  useEffect(() => {\n    if (state.map === undefined) return\n    const circle = new google.maps.Circle({\n      ...opts,\n      map: state.map,\n    })\n    setCircle(circle)\n    setPrevOpts(JSON.stringify(opts))\n\n    // Add the circle to state.objects\n    addCircle(circle)\n\n    // Remove the circle when the component is unmounted\n    return () => removeCircle()\n  }, [state.map])\n\n  // Register google map event listeners\n  useGoogleListener(circle, [\n    {name: 'center_changed', handler: onCenterChanged},\n    {name: 'click', handler: onClick},\n    {name: 'dblclick', handler: onDoubleClick},\n    {name: 'drag', handler: onDrag},\n    {name: 'dragend', handler: onDragEnd},\n    {name: 'dragstart', handler: onDragStart},\n    {name: 'mousedown', handler: onMouseDown},\n    {name: 'mouseout', handler: onMouseOut},\n    {name: 'mouseover', handler: onMouseOver},\n    {name: 'mouseup', handler: onMouseUp},\n    {name: 'radius_changed', handler: onRadiusChanged},\n    {name: 'rightclick', handler: onRightClick},\n  ])\n\n  // Modify the google.maps.Circle object when component props change\n  useMemoizedOptions(circle, opts, prevOpts, setPrevOpts)\n\n  return null\n}\n\nCircle.displayName = 'Circle'\n\nexport default Circle\n","import React, {useContext, useEffect, useState, useRef} from 'react'\nimport ReactDOM from 'react-dom'\nimport {CustomControlProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\n\nconst CustomControl = ({\n  bindingPosition = 'RIGHT_TOP',\n  children,\n}: CustomControlProps): React.ReactPortal | null => {\n  const {state} = useContext(GoogleMapContext)\n  const containerRef = useRef<HTMLDivElement>()\n  const [mounted, setMounted] = useState(false)\n  const [lastBindingPosition, setLastBindingPosition] = useState(\n    bindingPosition,\n  )\n\n  // Add the custom control to the map\n  useEffect(() => {\n    if (state.map === undefined) return\n\n    containerRef.current = document.createElement('div')\n\n    if (bindingPosition !== lastBindingPosition) {\n      const last =\n        state.map.controls[google.maps.ControlPosition[lastBindingPosition]]\n      const lastArray = last.getArray()\n      last.removeAt(\n        lastArray.findIndex(element => element === containerRef.current),\n      )\n      setLastBindingPosition(bindingPosition)\n    }\n\n    state.map.controls[google.maps.ControlPosition[bindingPosition]].push(\n      containerRef.current,\n    )\n\n    setMounted(true)\n  }, [state.map, bindingPosition])\n\n  // @ts-ignore\n  return mounted ? ReactDOM.createPortal(children, containerRef.current) : null\n}\n\nCustomControl.displayName = 'CustomControl'\n\nexport default CustomControl\n","import React, {useContext, useEffect, useRef, useState} from 'react'\nimport {DEFAULT_DRAWING_MANAGER_OPTIONS} from '../common/constants'\nimport {DrawingManagerProps, GoogleMapShape} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\nimport {useGoogleListener, useMemoizedOptions} from '../hooks'\n\nconst DrawingManager = ({\n  opts = DEFAULT_DRAWING_MANAGER_OPTIONS,\n  onCircleComplete,\n  onMarkerComplete,\n  onOverlayComplete,\n  onPolygonComplete,\n  onPolylineComplete,\n  onRectangleComplete,\n}: DrawingManagerProps) => {\n  const drawingManagerId = 'drawing-manager'\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [prevOpts, setPrevOpts] = useState('')\n  const [drawingManager, setDrawingManager] = useState<\n    google.maps.drawing.DrawingManager | undefined\n  >(undefined)\n  const [shapeCount, setShapeCount] = useState(0)\n  const shapeCountRef = useRef(0)\n  shapeCountRef.current = shapeCount\n  const addShape = (shape: GoogleMapShape) =>\n    setShapeCount(shapeCount => {\n      dispatch({\n        type: 'add_object',\n        object: shape,\n        id: `${drawingManagerId}-${shapeCount}`,\n      })\n      return shapeCount + 1\n    })\n\n  const removeShapes = () => {\n    for (let i = 0; i < shapeCountRef.current; i++) {\n      dispatch({type: 'remove_object', id: `${drawingManagerId}-${i}`})\n    }\n  }\n\n  const addDrawingManager = (\n    drawingManager: google.maps.drawing.DrawingManager,\n  ) =>\n    dispatch({\n      type: 'add_object',\n      object: drawingManager,\n      id: drawingManagerId,\n    })\n\n  const removeDrawingManager = () => {\n    removeShapes()\n    dispatch({type: 'remove_object', id: drawingManagerId})\n  }\n\n  useEffect(() => {\n    if (state.map === undefined) return\n    const drawingManager = new google.maps.drawing.DrawingManager({\n      ...opts,\n      map: state.map,\n    })\n    setDrawingManager(drawingManager)\n    setPrevOpts(JSON.stringify(opts))\n\n    // Add DrawingManager to state.objects\n    addDrawingManager(drawingManager)\n\n    // Remove DrawingManager and all shapes\n    return () => removeDrawingManager()\n  }, [state.map])\n\n  useGoogleListener(drawingManager, [\n    {name: 'circlecomplete', handler: onCircleComplete},\n    {name: 'markercomplete', handler: onMarkerComplete},\n    {name: 'overlaycomplete', handler: onOverlayComplete},\n    {\n      name: 'overlaycomplete',\n      handler: (event: google.maps.drawing.OverlayCompleteEvent) =>\n        addShape(event.overlay),\n    },\n    {name: 'polygoncomplete', handler: onPolygonComplete},\n    {name: 'polylinecomplete', handler: onPolylineComplete},\n    {name: 'rectanglecomplete', handler: onRectangleComplete},\n  ])\n\n  useMemoizedOptions(drawingManager, opts, prevOpts, setPrevOpts)\n\n  return null\n}\n\nDrawingManager.displayName = 'DrawingManager'\n\nexport default DrawingManager\n","import React, {useContext, useEffect, useState} from 'react'\nimport uuid from 'uuid/v1'\nimport {useGoogleListener} from '../hooks'\nimport {DEFAULT_GROUND_OVERLAY_OPTIONS} from '../common/constants'\nimport {GroundOverlayProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\n\nconst GroundOverlay = ({\n  id,\n  opts = DEFAULT_GROUND_OVERLAY_OPTIONS,\n  onClick,\n  onDoubleClick,\n}: GroundOverlayProps) => {\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [groundOverlay, setGroundOverlay] = useState<\n    google.maps.GroundOverlay | undefined\n  >(undefined)\n  const [groundOverlayId] = useState(id ? id : `ground-overlay-${uuid()}`)\n  const [prevBounds, setPrevBounds] = useState<\n    google.maps.LatLngBoundsLiteral | undefined\n  >(undefined)\n  const [prevClickable, setPrevClickable] = useState(true)\n  const addGroundOverlay = (groundOverlay: google.maps.GroundOverlay) =>\n    dispatch({type: 'add_object', object: groundOverlay, id: groundOverlayId})\n  const removeGroundOverlay = () =>\n    dispatch({type: 'remove_object', id: groundOverlayId})\n\n  const createGroundOverlay = () => {\n    const groundOverlay = new google.maps.GroundOverlay(opts.url, opts.bounds, {\n      clickable: opts.clickable,\n      opacity: opts.opacity,\n      map: state.map,\n    })\n    setGroundOverlay(groundOverlay)\n\n    // Record bounds and clickable\n    setPrevBounds(opts.bounds)\n    setPrevClickable(opts.clickable === undefined ? true : opts.clickable)\n\n    // Add the groundOverlay to state.objects\n    addGroundOverlay(groundOverlay)\n  }\n\n  useEffect(() => {\n    if (state.map === undefined) return\n    createGroundOverlay()\n\n    // Remove the groundOverlay when the component is unmounted\n    return () => removeGroundOverlay()\n  }, [state.map])\n\n  // Register google map event listeners\n  useGoogleListener(groundOverlay, [\n    {name: 'click', handler: onClick},\n    {name: 'dblclick', handler: onDoubleClick},\n  ])\n\n  // Modify the google.maps.GroundOverlay object when opacity changes\n  useEffect(() => {\n    if (groundOverlay === undefined) return\n    if (opts.opacity && opts.opacity !== groundOverlay.getOpacity())\n      groundOverlay.setOpacity(opts.opacity)\n  }, [opts.opacity])\n\n  // Recreate the object when url/bounds/clickable change\n  useEffect(() => {\n    if (state.map === undefined || groundOverlay === undefined) return\n    const clickable = opts.clickable === undefined ? true : opts.clickable\n    if (\n      opts.url !== groundOverlay.getUrl() ||\n      !Object.is(JSON.stringify(opts.bounds), JSON.stringify(prevBounds)) ||\n      clickable !== prevClickable\n    ) {\n      removeGroundOverlay()\n      createGroundOverlay()\n    }\n  }, [opts.url, opts.bounds, opts.clickable])\n\n  return null\n}\n\nGroundOverlay.displayName = 'GroundOverlay'\n\nexport default GroundOverlay\n","import React, {useEffect, useState} from 'react'\n\nconst validate = () =>\n  window.hasOwnProperty('google') && google.maps && google.maps.visualization\n\nconst withSecurityBounder = (WrappedComponent: any) => (props: any) => {\n  const [visLoaded, setVisLoaded] = useState(false)\n  useEffect(() => {\n    if (validate()) {\n      setVisLoaded(true)\n      return\n    }\n    const timer = setInterval(() => {\n      if (validate()) {\n        setVisLoaded(true)\n        clearInterval(timer)\n      }\n    }, 500)\n  }, [])\n\n  return <>{visLoaded ? <WrappedComponent {...props} /> : null}</>\n}\n\nexport default withSecurityBounder\n","import React, {useContext, useEffect, useState} from 'react'\nimport uuid from 'uuid/v1'\nimport {DEFAULT_HEAT_MAP_OPTIONS} from '../common/constants'\nimport {HeatMapProps, WeightedLatLng} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\nimport withSecurityBounder from '../hocs/SecurityBounder'\n\nconst transformLatLng = (\n  orig: WeightedLatLng,\n): google.maps.visualization.WeightedLocation => ({\n  location: new google.maps.LatLng(orig.lat, orig.lng),\n  weight: orig.weight || 1,\n})\n\nexport const HeatMap = ({\n  id,\n  opts = DEFAULT_HEAT_MAP_OPTIONS,\n}: HeatMapProps) => {\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [heatMap, setHeatMap] = useState<\n    google.maps.visualization.HeatmapLayer | undefined\n  >(undefined)\n  const [heatMapId] = useState(id ? id : `heat-map-${uuid()}`)\n  const addHeatMap = (groundOverlay: google.maps.visualization.HeatmapLayer) =>\n    dispatch({type: 'add_object', object: groundOverlay, id: heatMapId})\n  const removeHeatMap = () => dispatch({type: 'remove_object', id: heatMapId})\n  useEffect(() => {\n    if (state.map === undefined) return\n    const heatMap = new google.maps.visualization.HeatmapLayer({\n      ...opts,\n      data: opts.data.map(latLng => transformLatLng(latLng)),\n      map: state.map,\n    })\n    setHeatMap(heatMap)\n    addHeatMap(heatMap)\n    return () => removeHeatMap()\n  }, [state.map])\n\n  useEffect(() => {\n    if (heatMap === undefined || opts.data === undefined) return\n    heatMap.setData(opts.data.map(latLng => transformLatLng(latLng)))\n  }, [opts.data])\n\n  return null\n}\n\nexport const SafeHeatMap = withSecurityBounder(HeatMap)\n","import React, {useContext, useEffect, useState} from 'react'\nimport ReactDOM from 'react-dom'\nimport {DEFAULT_INFO_WINDOW_OPTIONS} from '../common/constants'\nimport {InfoWindowProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\nimport {useGoogleListener} from '../hooks'\n\nconst InfoWindow = ({\n  anchorId,\n  opts = DEFAULT_INFO_WINDOW_OPTIONS,\n  visible,\n  children,\n  onCloseClick,\n  onContentChanged,\n  onDOMReady,\n  onPositionChanged,\n  onZIndexChanged,\n}: InfoWindowProps): React.ReactPortal | null => {\n  if (typeof document === 'undefined') return null\n  const {state} = useContext(GoogleMapContext)\n  const [infoWindow, setInfoWindow] = useState<\n    google.maps.InfoWindow | undefined\n  >(undefined)\n  const [container] = useState(document.createElement('div'))\n\n  useEffect(() => {\n    if (state.map === undefined) return\n    const infoWindow = new google.maps.InfoWindow({\n      ...opts,\n      content: !!children ? container : opts.content,\n    })\n    setInfoWindow(infoWindow)\n\n    const anchor = anchorId ? state.objects.get(anchorId) : undefined\n\n    // Open or close the info window according to the `visible` prop\n    if (visible) infoWindow.open(state.map, anchor)\n    else infoWindow.close()\n\n    // Close the info window when the component is unmounted\n    return () => infoWindow.close()\n  }, [state.map, visible, anchorId && state.objects.get(anchorId)])\n\n  // Register event listeners\n  useGoogleListener(infoWindow, [\n    {name: 'closeclick', handler: onCloseClick},\n    {name: 'content_changed', handler: onContentChanged},\n    {name: 'domready', handler: onDOMReady},\n    {name: 'position_changed', handler: onPositionChanged},\n    {name: 'zindex_changed', handler: onZIndexChanged},\n  ])\n\n  // Modify the google.maps.InfoWindow object when component props change\n  useEffect(() => {\n    if (infoWindow === undefined) return\n    infoWindow.setOptions({\n      ...opts,\n      content: !!children ? container : opts.content,\n    })\n  }, [opts])\n\n  return ReactDOM.createPortal(children, container)\n}\n\nInfoWindow.displayName = 'InfoWindow'\n\nexport default InfoWindow\n","import React, {useContext, useEffect, useState} from 'react'\nimport uuid from 'uuid/v1'\nimport {DEFAULT_KML_LAYER_OPTIONS} from '../common/constants'\nimport {KmlLayerProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\nimport {useGoogleListener, useMemoizedOptions} from '../hooks'\n\nconst KmlLayer = ({\n  id,\n  opts = DEFAULT_KML_LAYER_OPTIONS,\n  onClick,\n  onDefaultViewportChanged,\n  onStatusChanged,\n}: KmlLayerProps) => {\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [prevOpts, setPrevOpts] = useState('')\n  const [kmlLayer, setKmlLayer] = useState<google.maps.KmlLayer | undefined>(\n    undefined,\n  )\n  const [kmlLayerId] = useState(id ? id : `kml-layer-${uuid()}`)\n\n  const addKmlLayer = (kmlLayer: google.maps.KmlLayer) =>\n    dispatch({\n      type: 'add_object',\n      object: kmlLayer,\n      id: kmlLayerId,\n    })\n  const removeKmlLayer = () => dispatch({type: 'remove_object', id: kmlLayerId})\n\n  // Create KmlLayer when map is ready\n  useEffect(() => {\n    if (state.map === undefined) return\n    const kmlLayer = new google.maps.KmlLayer({...opts, map: state.map})\n    setKmlLayer(kmlLayer)\n    setPrevOpts(JSON.stringify(opts))\n\n    // Add the kmlLayer to state.objects\n    addKmlLayer(kmlLayer)\n\n    // Remove the kmlLayer when the component is unmounted\n    return () => removeKmlLayer()\n  }, [state.map])\n\n  useGoogleListener(kmlLayer, [\n    {name: 'click', handler: onClick},\n    {name: 'defaultviewport_changed', handler: onDefaultViewportChanged},\n    {name: 'status_changed', handler: onStatusChanged},\n  ])\n\n  useMemoizedOptions(kmlLayer, opts, prevOpts, setPrevOpts)\n\n  return null\n}\n\nKmlLayer.displayName = 'KmlLayer'\n\nexport default KmlLayer\n","import React, {useEffect, useContext, useState, useRef} from 'react'\nimport {useGoogleAPI, useGoogleListener, useMemoizedOptions} from '../hooks'\nimport {\n  DEFAULT_MAP_OPTIONS,\n  DEFAULT_MAP_STYLE,\n  GOOGLE_MAP_LIBRARY_NAMES,\n} from '../common/constants'\nimport {MapBoxProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\n\nconst MapBox = ({\n  apiKey = '',\n  language,\n  region,\n  className,\n  style = DEFAULT_MAP_STYLE,\n  opts = DEFAULT_MAP_OPTIONS,\n  useDrawing = false,\n  useGeometry = false,\n  usePlaces = false,\n  useVisualization = false,\n  LoadedComponent = null,\n  LoadingComponent = <p>Loading...</p>,\n  onBoundsChanged,\n  onCenterChanged,\n  onClick,\n  onDoubleClick,\n  onDrag,\n  onDragEnd,\n  onDragStart,\n  onHeadingChanged,\n  onIdle,\n  onMapTypeIdChanged,\n  onMouseMove,\n  onMouseOut,\n  onMouseOver,\n  onProjectionChanged,\n  onRightClick,\n  onTilesLoaded,\n  onTiltChanged,\n  onZoomChanged,\n}: MapBoxProps) => {\n  // Get access to the Google Map context\n  const {dispatch} = useContext(GoogleMapContext)\n  const [prevOpts, setPrevOpts] = useState('')\n  const [map, setMap] = useState<google.maps.Map | undefined>(undefined)\n\n  const mapElementRef = useRef<HTMLDivElement>(null)\n\n  // Define action dispatchers\n  const initMap = (\n    map: google.maps.Map,\n    places?: google.maps.places.PlacesService,\n  ) => dispatch({type: 'init_map', map: map, places: places})\n  const reset = () => dispatch({type: 'reset'})\n\n  // Construct the library param\n  const libraries = {\n    drawing: useDrawing,\n    geometry: useGeometry,\n    places: usePlaces,\n    visualization: useVisualization,\n  }\n  const libraryParam = GOOGLE_MAP_LIBRARY_NAMES.filter(\n    library => libraries[library],\n  ).join(',')\n  const loaded = useGoogleAPI({\n    apiKey: apiKey,\n    libraryParam: libraryParam === '' ? '' : `&libraries=${libraryParam}`,\n    languageParam: language === undefined ? '' : `&language=${language}`,\n    regionParam: region === undefined ? '' : `&region=${region}`,\n  })\n\n  // Load Google Map\n  useEffect(() => {\n    if (!loaded) return\n    const stringifiedOpts = JSON.stringify(opts)\n    const map = new google.maps.Map(\n      mapElementRef.current,\n      JSON.parse(stringifiedOpts),\n    )\n    setMap(map)\n    setPrevOpts(stringifiedOpts)\n    if (usePlaces) {\n      const places = new google.maps.places.PlacesService(map)\n      initMap(map, places)\n    } else initMap(map)\n    return () => reset()\n  }, [loaded])\n\n  // Register event listeners\n  useGoogleListener(map, [\n    {name: 'bounds_changed', handler: onBoundsChanged},\n    {name: 'center_changed', handler: onCenterChanged},\n    {name: 'click', handler: onClick},\n    {name: 'dblclick', handler: onDoubleClick},\n    {name: 'drag', handler: onDrag},\n    {name: 'dragend', handler: onDragEnd},\n    {name: 'dragstart', handler: onDragStart},\n    {name: 'heading_changed', handler: onHeadingChanged},\n    {name: 'idle', handler: onIdle},\n    {name: 'maptypeid_changed', handler: onMapTypeIdChanged},\n    {name: 'mousemove', handler: onMouseMove},\n    {name: 'mouseout', handler: onMouseOut},\n    {name: 'mouseover', handler: onMouseOver},\n    {name: 'projection_changed', handler: onProjectionChanged},\n    {name: 'rightclick', handler: onRightClick},\n    {name: 'tilesloaded', handler: onTilesLoaded},\n    {name: 'tilt_changed', handler: onTiltChanged},\n    {name: 'zoom_changed', handler: onZoomChanged},\n  ])\n\n  // Modify the google.maps.Map object when component props change\n  useMemoizedOptions(map, opts, prevOpts, setPrevOpts)\n\n  // Render <MapBox>\n  return (\n    <>\n      {loaded ? LoadedComponent : LoadingComponent}\n      <div ref={mapElementRef} style={style} className={className} />\n    </>\n  )\n}\n\nMapBox.displayName = 'MapBox'\n\nexport default MapBox\n","import React, {useContext, useEffect, useState} from 'react'\nimport uuid from 'uuid/v1'\nimport {DEFAULT_MARKER_OPTIONS} from '../common/constants'\nimport {MarkerProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\nimport {useGoogleListener, useMemoizedOptions} from '../hooks'\n\nconst Marker = ({\n  id,\n  opts = DEFAULT_MARKER_OPTIONS,\n  onAnimationChanged,\n  onClick,\n  onClickableChanged,\n  onCursorChanged,\n  onDoubleClick,\n  onDrag,\n  onDragEnd,\n  onDragStart,\n  onDraggableChanged,\n  onFlatChanged,\n  onIconChanged,\n  onMouseDown,\n  onMouseOut,\n  onMouseOver,\n  onMouseUp,\n  onPositionChanged,\n  onRightClick,\n  onShapeChanged,\n  onTitleChanged,\n  onVisibleChanged,\n  onZIndexChanged,\n}: MarkerProps) => {\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [prevOpts, setPrevOpts] = useState('')\n  const [marker, setMarker] = useState<google.maps.Marker | undefined>(\n    undefined,\n  )\n  const [markerId] = useState(id ? id : `marker-${uuid()}`)\n\n  const addMarker = (marker: google.maps.Marker) =>\n    dispatch({type: 'add_object', object: marker, id: markerId})\n\n  const removeMarker = () => dispatch({type: 'remove_object', id: markerId})\n\n  useEffect(() => {\n    if (state.map === undefined) return\n    const marker = new google.maps.Marker({...opts, map: state.map})\n    setMarker(marker)\n    setPrevOpts(JSON.stringify(opts))\n\n    // Add the marker to state.objects\n    addMarker(marker)\n\n    // Remove the marker when the component is unmounted\n    return () => removeMarker()\n  }, [state.map])\n\n  // Register event listeners\n  useGoogleListener(marker, [\n    {name: 'animation_changed', handler: onAnimationChanged},\n    {name: 'click', handler: onClick},\n    {name: 'clickable_changed', handler: onClickableChanged},\n    {name: 'cursor_changed', handler: onCursorChanged},\n    {name: 'dblclick', handler: onDoubleClick},\n    {name: 'drag', handler: onDrag},\n    {name: 'dragend', handler: onDragEnd},\n    {name: 'draggable_changed', handler: onDraggableChanged},\n    {name: 'dragstart', handler: onDragStart},\n    {name: 'flat_changed', handler: onFlatChanged},\n    {name: 'icon_changed', handler: onIconChanged},\n    {name: 'mousedown', handler: onMouseDown},\n    {name: 'mouseout', handler: onMouseOut},\n    {name: 'mouseover', handler: onMouseOver},\n    {name: 'mouseup', handler: onMouseUp},\n    {name: 'position_changed', handler: onPositionChanged},\n    {name: 'rightclick', handler: onRightClick},\n    {name: 'shape_changed', handler: onShapeChanged},\n    {name: 'title_changed', handler: onTitleChanged},\n    {name: 'visible_changed', handler: onVisibleChanged},\n    {name: 'zindex_changed', handler: onZIndexChanged},\n  ])\n\n  // Modify the GoogleMapMarker object when component props change\n  useMemoizedOptions(marker, opts, prevOpts, setPrevOpts)\n\n  return null\n}\n\nMarker.displayName = 'Marker'\n\nexport default Marker\n","import React, {useContext, useEffect, useState} from 'react'\nimport ReactDOM from 'react-dom'\nimport {NYC_LATLNG} from '../common/constants'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\nimport {OverlayViewProps} from '../common/types'\n\nconst OverlayView = ({\n  pane = 'overlayMouseTarget',\n  position = NYC_LATLNG,\n  children,\n  onClick,\n  onDoubleClick,\n  onMouseDown,\n  onMouseOut,\n  onMouseOver,\n  onMouseUp,\n  onTouchEnd,\n  onTouchStart,\n  disableMapHits = false,\n  disableMapHitsAndGestures = false,\n}: OverlayViewProps): React.ReactPortal | null => {\n  if (typeof document === 'undefined') return null\n\n  const {state} = useContext(GoogleMapContext)\n  const [container] = useState<HTMLDivElement>(document.createElement('div'))\n  const [overlay, setOverlay] = useState<google.maps.OverlayView | undefined>(\n    undefined,\n  )\n\n  useEffect(() => {\n    if (state.map === undefined) return\n    const overlay = new google.maps.OverlayView()\n    overlay.onAdd = () => {\n      container.style.position = 'absolute'\n      container.onclick = onClick || null\n      container.ondblclick = onDoubleClick || null\n      container.onmousedown = onMouseDown || null\n      container.onmouseover = onMouseOver || null\n      container.onmouseout = onMouseOut || null\n      container.onmouseup = onMouseUp || null\n      container.ontouchend = onTouchEnd || null\n      container.ontouchstart = onTouchStart || null\n\n      // @types/googlemap does not define `preventMapHitsFrom` or `preventMapHitsAndGesturesFrom`\n      if (disableMapHitsAndGestures)\n        (google.maps.OverlayView as any).preventMapHitsAndGesturesFrom(\n          container,\n        )\n      else if (disableMapHits)\n        (google.maps.OverlayView as any).preventMapHitsFrom(container)\n\n        // Use an ugly cast to avoid package bundle issue\n      ;(overlay.getPanes() as any)[pane].appendChild(container)\n    }\n    overlay.onRemove = () => {\n      container.parentNode && container.parentNode.removeChild(container)\n    }\n    overlay.setMap(state.map)\n    setOverlay(overlay)\n    return () => overlay.setMap(null)\n  }, [state.map])\n\n  useEffect(() => {\n    if (overlay !== undefined) {\n      overlay.setMap(null)\n      overlay.draw = () => {\n        const location = overlay\n          .getProjection()\n          .fromLatLngToDivPixel(\n            new google.maps.LatLng(position.lat, position.lng),\n          )\n        container.style.left = JSON.stringify(location.x) + 'px'\n        container.style.top = JSON.stringify(location.y) + 'px'\n      }\n      overlay.setMap(state.map as google.maps.Map)\n    }\n  }, [overlay, position])\n\n  return ReactDOM.createPortal(children, container)\n}\n\nOverlayView.displayName = 'OverlayView'\n\nexport default OverlayView\n","import React, {useContext, useEffect, useState} from 'react'\nimport uuid from 'uuid/v1'\nimport {DEFAULT_POLYGON_OPTIONS} from '../common/constants'\nimport {PolygonProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\nimport {useGoogleListener, useMemoizedOptions} from '../hooks'\n\nconst Polygon = ({\n  id,\n  opts = DEFAULT_POLYGON_OPTIONS,\n  onClick,\n  onDoubleClick,\n  onDrag,\n  onDragEnd,\n  onDragStart,\n  onMouseDown,\n  onMouseOut,\n  onMouseOver,\n  onMouseUp,\n  onRightClick,\n}: PolygonProps) => {\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [prevOpts, setPrevOpts] = useState('')\n  const [polygon, setPolygon] = useState<google.maps.Polygon | undefined>(\n    undefined,\n  )\n  const [polygonId] = useState(id ? id : `polygon-${uuid()}`)\n\n  const addPolygon = (polygon: google.maps.Polygon) =>\n    dispatch({type: 'add_object', object: polygon, id: polygonId})\n  const removePolygon = () => dispatch({type: 'remove_object', id: polygonId})\n\n  useEffect(() => {\n    if (state.map === undefined) return\n    const polygon = new google.maps.Polygon({\n      ...opts,\n      map: state.map,\n    })\n    setPolygon(polygon)\n    setPrevOpts(JSON.stringify(opts))\n\n    // Add the polygon to state.objects\n    addPolygon(polygon)\n\n    // Remove the polygon when the component is unmounted\n    return () => removePolygon()\n  }, [state.map])\n\n  // Register google map event listeners\n  useGoogleListener(polygon, [\n    {name: 'click', handler: onClick},\n    {name: 'dblclick', handler: onDoubleClick},\n    {name: 'drag', handler: onDrag},\n    {name: 'dragend', handler: onDragEnd},\n    {name: 'dragstart', handler: onDragStart},\n    {name: 'mousedown', handler: onMouseDown},\n    {name: 'mouseout', handler: onMouseOut},\n    {name: 'mouseover', handler: onMouseOver},\n    {name: 'mouseup', handler: onMouseUp},\n    {name: 'rightclick', handler: onRightClick},\n  ])\n\n  // Modify the google.maps.Polygon object when component props change\n  useMemoizedOptions(polygon, opts, prevOpts, setPrevOpts)\n\n  return null\n}\n\nPolygon.displayName = 'Polygon'\n\nexport default Polygon\n","import React, {useContext, useEffect, useState} from 'react'\nimport uuid from 'uuid/v1'\nimport {DEFAULT_POLYLINE_OPTIONS} from '../common/constants'\nimport {PolylineProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\nimport {useGoogleListener, useMemoizedOptions} from '../hooks'\n\nconst Polyline = ({\n  id,\n  opts = DEFAULT_POLYLINE_OPTIONS,\n  onClick,\n  onDoubleClick,\n  onDrag,\n  onDragEnd,\n  onDragStart,\n  onMouseDown,\n  onMouseOut,\n  onMouseOver,\n  onMouseUp,\n  onRightClick,\n}: PolylineProps) => {\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [prevOpts, setPrevOpts] = useState('')\n  const [polyline, setPolyline] = useState<google.maps.Polyline | undefined>(\n    undefined,\n  )\n  const [polylineId] = useState(id ? id : `polyline-${uuid()}`)\n\n  const addPolyline = (polyline: google.maps.Polyline) =>\n    dispatch({type: 'add_object', object: polyline, id: polylineId})\n  const removePolyline = () => dispatch({type: 'remove_object', id: polylineId})\n\n  useEffect(() => {\n    if (state.map === undefined) return\n    const polyline = new google.maps.Polyline({\n      ...opts,\n      map: state.map,\n    })\n    setPolyline(polyline)\n    setPrevOpts(JSON.stringify(opts))\n\n    // Add the polyline to state.objects\n    addPolyline(polyline)\n\n    // Remove the polyline when the component is unmounted\n    return () => removePolyline()\n  }, [state.map])\n\n  // Register google map event listeners\n  useGoogleListener(polyline, [\n    {name: 'click', handler: onClick},\n    {name: 'dblclick', handler: onDoubleClick},\n    {name: 'drag', handler: onDrag},\n    {name: 'dragend', handler: onDragEnd},\n    {name: 'dragstart', handler: onDragStart},\n    {name: 'mousedown', handler: onMouseDown},\n    {name: 'mouseout', handler: onMouseOut},\n    {name: 'mouseover', handler: onMouseOver},\n    {name: 'mouseup', handler: onMouseUp},\n    {name: 'rightclick', handler: onRightClick},\n  ])\n\n  // Modify the google.maps.Polyline object when component props change\n  useMemoizedOptions(polyline, opts, prevOpts, setPrevOpts)\n\n  return null\n}\n\nPolyline.displayName = 'Polyline'\n\nexport default Polyline\n","import React, {useContext, useEffect, useState} from 'react'\nimport uuid from 'uuid/v1'\nimport {DEFAULT_RECTANGLE_OPTIONS} from '../common/constants'\nimport {RectangleProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\nimport {useGoogleListener, useMemoizedOptions} from '../hooks'\n\nconst Rectangle = ({\n  id,\n  opts = DEFAULT_RECTANGLE_OPTIONS,\n  onBoundsChanged,\n  onClick,\n  onDoubleClick,\n  onDrag,\n  onDragEnd,\n  onDragStart,\n  onMouseDown,\n  onMouseOut,\n  onMouseOver,\n  onMouseUp,\n  onRightClick,\n}: RectangleProps) => {\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [prevOpts, setPrevOpts] = useState('')\n  const [rectangle, setRectangle] = useState<google.maps.Rectangle | undefined>(\n    undefined,\n  )\n  const [rectangleId] = useState(id ? id : `rectangle-${uuid()}`)\n\n  const addRectangle = (rectangle: google.maps.Rectangle) =>\n    dispatch({type: 'add_object', object: rectangle, id: rectangleId})\n  const removeRectangle = () =>\n    dispatch({type: 'remove_object', id: rectangleId})\n\n  useEffect(() => {\n    if (state.map === undefined) return\n    const rectangle = new google.maps.Rectangle({\n      ...opts,\n      map: state.map,\n    })\n    setRectangle(rectangle)\n    setPrevOpts(JSON.stringify(opts))\n\n    // Add the rectangle to state.objects\n    addRectangle(rectangle)\n\n    // Remove the rectangle when the component is unmounted\n    return () => removeRectangle()\n  }, [state.map])\n\n  // Register google map event listeners\n  useGoogleListener(rectangle, [\n    {name: 'bounds_changed', handler: onBoundsChanged},\n    {name: 'click', handler: onClick},\n    {name: 'dblclick', handler: onDoubleClick},\n    {name: 'drag', handler: onDrag},\n    {name: 'dragend', handler: onDragEnd},\n    {name: 'dragstart', handler: onDragStart},\n    {name: 'mousedown', handler: onMouseDown},\n    {name: 'mouseout', handler: onMouseOut},\n    {name: 'mouseover', handler: onMouseOver},\n    {name: 'mouseup', handler: onMouseUp},\n    {name: 'rightclick', handler: onRightClick},\n  ])\n\n  // Modify the google.maps.Rectangle object when component props change\n  useMemoizedOptions(rectangle, opts, prevOpts, setPrevOpts)\n\n  return null\n}\n\nRectangle.displayName = 'Rectangle'\n\nexport default Rectangle\n","import React, {useContext, useEffect, useState} from 'react'\nimport ReactDOMServer from 'react-dom/server'\nimport uuid from 'uuid/v1'\nimport {useGoogleListener} from '../hooks'\nimport {DEFAULT_SEARCH_BOX_OPTIONS} from '../common/constants'\nimport {BasicSearchBoxProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\n\nconst BasicSearchBox = ({\n  id,\n  opts = DEFAULT_SEARCH_BOX_OPTIONS,\n  onPlacesChanged,\n  bindingPosition,\n  ...restProps\n}: BasicSearchBoxProps) => {\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [searchBox, setSearchBox] = useState<\n    google.maps.places.SearchBox | undefined\n  >(undefined)\n  const [searchBoxId] = useState(id ? id : `search-box-${uuid()}`)\n  const [container] = useState(\n    document\n      .createRange()\n      .createContextualFragment(\n        ReactDOMServer.renderToString(\n          <input id={searchBoxId} {...restProps} />,\n        ),\n      ).firstElementChild,\n  )\n  const [lastBindingPosition, setLastBindingPosition] = useState(\n    bindingPosition,\n  )\n\n  const addSearch = (search: google.maps.places.SearchBox) =>\n    dispatch({type: 'add_object', object: search, id: searchBoxId})\n  const removeSearch = () => dispatch({type: 'remove_object', id: searchBoxId})\n\n  // Create google.maps.places.SearchBox\n  useEffect(() => {\n    if (state.map === undefined || state.places === undefined) return\n    const inputNode = (bindingPosition\n      ? container\n      : document.getElementById(searchBoxId)) as HTMLInputElement\n    const searchBox = new google.maps.places.SearchBox(inputNode, opts)\n    setSearchBox(searchBox)\n    addSearch(searchBox)\n    if (bindingPosition) {\n      if (bindingPosition !== lastBindingPosition) {\n        const last =\n          state.map.controls[google.maps.ControlPosition[lastBindingPosition!]]\n        const lastArray = last.getArray()\n        last.removeAt(lastArray.findIndex(element => element === container))\n        setLastBindingPosition(bindingPosition)\n      }\n      state.map.controls[google.maps.ControlPosition[bindingPosition]].push(\n        inputNode,\n      )\n    }\n    return () => removeSearch()\n  }, [state.places, bindingPosition])\n\n  // Register google map event listeners\n  useGoogleListener(searchBox, [\n    {name: 'places_changed', handler: onPlacesChanged},\n  ])\n\n  // Modify the google.maps.places.SearchBox object when component props change\n  useEffect(() => {\n    if (searchBox === undefined || opts.bounds === undefined) return\n    searchBox.setBounds(opts.bounds)\n  }, [opts.bounds])\n\n  return bindingPosition ? null : <input id={searchBoxId} {...restProps} />\n}\n\nBasicSearchBox.displayName = 'SearchBox'\n\nexport default BasicSearchBox\n","import React from 'react'\nimport {SearchBoxProps} from '../common/types'\nimport BasicSearchBox from './BasicSearchBox'\n\nconst SearchBox = (props: SearchBoxProps) => <BasicSearchBox {...props} />\n\nSearchBox.displayName = 'SearchBox'\n\nexport default SearchBox\n","import React from 'react'\nimport BasicSearchBox from './BasicSearchBox'\nimport {StandaloneSearchBoxProps} from '../common/types'\n\nconst StandaloneSearchBox = (props: StandaloneSearchBoxProps) => (\n  <BasicSearchBox {...props} />\n)\n\nStandaloneSearchBox.displayName = 'StandaloneSearchBox'\n\nexport default StandaloneSearchBox\n","import React, {useContext, useEffect, useState} from 'react'\nimport uuid from 'uuid/v1'\nimport {\n  DEFAULT_MAP_STYLE,\n  DEFAULT_STREET_VIEW_OPTIONS,\n} from '../common/constants'\nimport {BasicStreetViewProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\nimport {useGoogleListener, useMemoizedOptions} from '../hooks'\n\nconst BasicStreetView = ({\n  id,\n  className,\n  style = DEFAULT_MAP_STYLE,\n  opts = DEFAULT_STREET_VIEW_OPTIONS,\n  bindToMap,\n  onCloseClick,\n  onPanoChanged,\n  onPositionChanged,\n  onPovChanged,\n  onResize,\n  onStatusChanged,\n  onVisibleChanged,\n  onZoomChanged,\n}: BasicStreetViewProps) => {\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [prevOpts, setPrevOpts] = useState('')\n  const [streetView, setStreetView] = useState<\n    google.maps.StreetViewPanorama | undefined\n  >(undefined)\n  const [streetViewId] = useState(\n    id ? id : bindToMap ? 'street-view' : `street-view-${uuid()}`,\n  )\n\n  const addStreetView = (streetView: google.maps.StreetViewPanorama) =>\n    dispatch({type: 'add_object', object: streetView, id: streetViewId})\n  const removeStreetView = () =>\n    dispatch({type: 'remove_object', id: streetViewId})\n\n  // Handle StreetView creation and unregister\n  useEffect(() => {\n    if (state.map === undefined) return\n    const streetView = new google.maps.StreetViewPanorama(\n      document.getElementById(streetViewId) as HTMLElement,\n      opts,\n    )\n    setStreetView(streetView)\n    setPrevOpts(JSON.stringify(opts))\n    addStreetView(streetView)\n    if (bindToMap) {\n      state.map.setOptions({streetView: streetView})\n    }\n    return () => {\n      if (bindToMap) {\n        state.map && state.map.setOptions({streetView: undefined})\n      }\n      removeStreetView()\n    }\n  }, [state.map])\n\n  useGoogleListener(streetView, [\n    {name: 'closeclick', handler: onCloseClick},\n    {name: 'pano_changed', handler: onPanoChanged},\n    {name: 'position_changed', handler: onPositionChanged},\n    {name: 'pov_changed', handler: onPovChanged},\n    {name: 'resize', handler: onResize},\n    {name: 'status_changed', handler: onStatusChanged},\n    {name: 'visible_changed', handler: onVisibleChanged},\n    {name: 'zoom_changed', handler: onZoomChanged},\n  ])\n\n  // Modify the google.maps.StreetViewPanorama object when component props change\n  useMemoizedOptions(streetView, opts, prevOpts, setPrevOpts)\n\n  return <div className={className} id={streetViewId} style={style} />\n}\n\nBasicStreetView.displayName = 'BasicStreetView'\n\nexport default BasicStreetView\n","import React from 'react'\nimport {StandaloneStreetViewProps} from '../common/types'\nimport BasicStreetView from './BasicStreetView'\n\nconst StandaloneStreetView = (props: StandaloneStreetViewProps) => (\n  <BasicStreetView bindToMap={false} {...props} />\n)\n\nStandaloneStreetView.displayName = 'StandaloneStreetView'\n\nexport default StandaloneStreetView\n","import React from 'react'\nimport {StreetViewProps} from '../common/types'\nimport BasicStreetView from './BasicStreetView'\n\nconst StreetView = (props: StreetViewProps) => (\n  <BasicStreetView bindToMap {...props} />\n)\n\nStreetView.displayName = 'StreetView'\n\nexport default StreetView\n","import React from 'react'\nimport Layer from './Layer'\nimport {TrafficLayerProps} from '../common/types'\n\nconst TrafficLayer = ({opts}: TrafficLayerProps) => (\n  <Layer type=\"traffic\" opts={opts} />\n)\n\nTrafficLayer.displayName = 'TrafficLayer'\n\nexport default TrafficLayer\n","import React from 'react'\nimport Layer from './Layer'\n\nconst TransitLayer = ({}) => <Layer type=\"transit\" />\n\nTransitLayer.displayName = 'TransitLayer'\n\nexport default TransitLayer\n"],"names":["const","NYC_LATLNG","lat","lng","NYC_POLYGON","NYC_RECTANGLE","east","west","north","south","DEFAULT_CIRCLE_OPTIONS","center","radius","DEFAULT_DRAWING_MANAGER_OPTIONS","DEFAULT_GROUND_OVERLAY_OPTIONS","url","bounds","DEFAULT_HEAT_MAP_OPTIONS","data","DEFAULT_INFO_WINDOW_OPTIONS","content","position","DEFAULT_KML_LAYER_OPTIONS","DEFAULT_MAP_OPTIONS","zoom","DEFAULT_MAP_STYLE","height","width","DEFAULT_MARKER_OPTIONS","DEFAULT_POLYGON_OPTIONS","paths","DEFAULT_POLYLINE_OPTIONS","path","DEFAULT_RECTANGLE_OPTIONS","DEFAULT_SEARCH_BOX_OPTIONS","DEFAULT_AUTOCOMPLETE_OPTIONS","DEFAULT_STREET_VIEW_OPTIONS","GOOGLE_MAP_LIBRARY_NAMES","useGoogleAPI","ref","useState","useEffect","document","googleMapScriptUri","GOOGLE_MAP_BASE_URI","apiKey","libraryParam","languageParam","regionParam","loadjs","isDefined","ready","success","setLoaded","error","reset","console","loaded","useGoogleListener","instance","events","undefined","listeners","forEach","event","handler","push","google","maps","addListener","name","listener","remove","useMemoizedOptions","opts","prevOpts","setPrevOpts","JSON","stringify","setOptions","initialState","map","objects","Map","places","GoogleMapContext","React","createContext","state","dispatch","reducer","action","type","Error","Object","object","id","has","set","objectToRemove","get","setMap","delete","GoogleMapProvider","useReducer","Provider","value","children","GoogleMapConsumer","Consumer","BasicAutocomplete","useContext","uuid","createRange","createContextualFragment","ReactDOMServer","renderToString","autocompleteId","restProps","firstElementChild","bindingPosition","inputNode","container","getElementById","autocomplete","Autocomplete","setAutocomplete","addAutocomplete","lastBindingPosition","last","controls","ControlPosition","lastArray","getArray","removeAt","findIndex","element","setLastBindingPosition","onPlaceChanged","displayName","props","StandaloneAutocomplete","Layer","layerId","layerNameToClass","bicycling","BicyclingLayer","traffic","TrafficLayer","transit","TransitLayer","layer","setLayer","addLayer","Circle","circle","setCircle","circleId","addCircle","onCenterChanged","onClick","onDoubleClick","onDrag","onDragEnd","onDragStart","onMouseDown","onMouseOut","onMouseOver","onMouseUp","onRadiusChanged","onRightClick","CustomControl","containerRef","useRef","current","createElement","setMounted","mounted","ReactDOM","createPortal","DrawingManager","shapeCountRef","shapeCount","drawingManager","drawing","setDrawingManager","addDrawingManager","let","i","drawingManagerId","removeShapes","onCircleComplete","onMarkerComplete","onOverlayComplete","shape","overlay","setShapeCount","onPolygonComplete","onPolylineComplete","onRectangleComplete","GroundOverlay","removeGroundOverlay","groundOverlayId","createGroundOverlay","groundOverlay","clickable","opacity","setGroundOverlay","setPrevBounds","setPrevClickable","addGroundOverlay","getOpacity","setOpacity","getUrl","is","prevBounds","prevClickable","validate","window","hasOwnProperty","visualization","withSecurityBounder","WrappedComponent","setVisLoaded","timer","setInterval","clearInterval","visLoaded","transformLatLng","orig","location","LatLng","weight","SafeHeatMap","heatMap","HeatmapLayer","latLng","setHeatMap","heatMapId","setData","InfoWindow","infoWindow","setInfoWindow","anchor","anchorId","visible","open","close","onCloseClick","onContentChanged","onDOMReady","onPositionChanged","onZIndexChanged","KmlLayer","kmlLayer","setKmlLayer","kmlLayerId","addKmlLayer","onDefaultViewportChanged","onStatusChanged","MapBox","mapElementRef","initMap","libraries","useDrawing","geometry","useGeometry","usePlaces","useVisualization","filter","library","join","language","region","stringifiedOpts","parse","PlacesService","onBoundsChanged","onHeadingChanged","onIdle","onMapTypeIdChanged","onMouseMove","onProjectionChanged","onTilesLoaded","onTiltChanged","onZoomChanged","LoadedComponent","LoadingComponent","style","className","Marker","marker","setMarker","markerId","addMarker","onAnimationChanged","onClickableChanged","onCursorChanged","onDraggableChanged","onFlatChanged","onIconChanged","onShapeChanged","onTitleChanged","onVisibleChanged","OverlayView","onAdd","onclick","ondblclick","onmousedown","onmouseover","onmouseout","onmouseup","ontouchend","onTouchEnd","ontouchstart","onTouchStart","disableMapHitsAndGestures","preventMapHitsAndGesturesFrom","disableMapHits","preventMapHitsFrom","getPanes","pane","appendChild","onRemove","parentNode","removeChild","setOverlay","draw","getProjection","fromLatLngToDivPixel","left","x","top","y","Polygon","polygon","setPolygon","polygonId","addPolygon","Polyline","polyline","setPolyline","polylineId","addPolyline","Rectangle","rectangle","setRectangle","rectangleId","addRectangle","BasicSearchBox","searchBoxId","searchBox","SearchBox","setSearchBox","onPlacesChanged","setBounds","StandaloneSearchBox","BasicStreetView","bindToMap","streetView","StreetViewPanorama","streetViewId","setStreetView","addStreetView","onPanoChanged","onPovChanged","onResize","StandaloneStreetView","StreetView"],"mappings":"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"}